$SESSION_LOCATION='/var/giovanni/session';
$SESSION_TIMEOUT='2400';

$JAR_DIR='/opt/giovanni4/jar';
# Root cache directory for file based cache
$CACHE_DIR = '/var/giovanni/cache';
# Extra metadata columns in the cache. (Note: there is an implied "PATH" first column)
@CACHE_COLUMNS = ("STARTTIME", "ENDTIME", "TIME", "DATAPERIOD");
# Directory for storing user supplied data
$USER_DATA_DIR = "/var/tmp/www/TS2/giovanni/users";
# configuration file for units
$UNITS_CFG='/opt/giovanni4/cfg/unitsCfg.xml';

# SSW-like search tool for user supplied data
%ENV=(
  TMPDIR => '/var/giovanni/session/TEMP',

  PATH      => '/usr/local/bin/santalinks:/opt/giovanni4/bin:/opt/anaconda/bin:/opt/grads/:/usr/local/bin/:/usr/bin:/bin:',
  MAGICK_THREAD_LIMIT => '1',
  PERL5LIB => '/opt/giovanni4/share/perl5',
  PYTHONPATH => '/opt/giovanni4/lib/python2.7/site-packages/',

  # NOTE: the matplotlib python library wants a home directory to write some 
  # configuration to. Failing that, it wants this environment variable set to a
  # writable directory.
  MPLCONFIGDIR => $SESSION_LOCATION,
  # Python wants a home directory to unzip eggs to. Our web user does not
  # have a home directory, so specify this environment variable.
  PYTHON_EGG_CACHE => "$SESSION_LOCATION/python-eggs",
  
  # HDF_DISABLE_VERSION_CHECK is needed by MapServer to disable it from 
  # verifying HDF version; there might be a conflict between HDF version 
  # used in compiling MapServer and the one available on the system.
  HDF5_DISABLE_VERSION_CHECK => '2',
  
  # For GrADS
  GADDIR => '/opt/grads/Resources/SupportData',


  # For numpy, set openblas to use a single thread
  OPENBLAS_NUM_THREADS => '1',
  GOTO_NUM_THREADS => '1',
  OMP_NUM_THREADS => '1',
  
  # For reprojection
  GDAL_DATA => '/usr/share/gdal',  

  # For n jobs in parallel (ArAvTs)
  JOBS => '5',
);

# Maps a directory on a file system to URL 
%URL_LOOKUP=(
  '/var/giovanni/session' => '/session'
  );

# Maps WWW directory to URL
%WWW_URL_LOOKUP =(
                '/opt/giovanni4/www' => '/giovanni'
              );

# Maps a server name to its sharded domains: values must be an array ref 
%DOMAIN_LOOKUP=(
  'disc1.gesdisc.eosdis.nasa.gov' => [qw(disc1-a.gesdisc.eosdis.nasa.gov disc1-b.gesdisc.eosdis.nasa.gov disc1-c.gesdisc.eosdis.nasa.gov disc1-d.gesdisc.eosdis.nasa.gov)]
  );

$LINEAGE_XSL="/opt/giovanni4/cfg/GiovanniLineage.xsl";

# Used by Giovanni::CGI. Valid types are:
#
#  bbox - bounding box
#  boolean - true or false (case insensitive)
#  data - variable/data/aesir id
#  data_keyword - giovanni search keywords
#  filename - filename (no paths allowed!)
#  flag - something that can only be '1'
#  format - download format. Currently image/png, image/jpeg, netcdf, tiff, asc, png, kmz, geotiff, xml, json.
#  g_config - name of a configuration parameter in giovanni.cfg. Currently, only
#    EARTHDATA_LOGIN is permitted.
#  hex_color - hexadecimal representation of color. E.g. - 0x7b7b91.
#  json - a valid json string
#  months - 01, 02, 03, ..., 12
#  number - floating point numbers
#  oauth_code - OAuth authorization code
#  portal - GIOVANNI, etc.
#  plot_text - currently used for caption, title, and subtitle. This regular
#    expression allows everything through, so DO NOT USE without discussion.
#  portal - AEROSTAT|MAPSS|YOTC|MULTISENSOR|GIOVANNI
#  projection - epsg:3031|epsg:3413|epsg:4326
#  request - wcs/wms request. Currently getcapabilities|describecoverage|getcoverage|getmap|getlegendgraphic
#  seasons - comma-separated seasons. E.g. - 'DJF,MAM,JJA,SON'
#  service - Giovanni plot types and wms/wcs. E.g. - 'TmAvOvMp'
#  shape - Giovanni shape parameter
#  step - Giovanni step. E.g. - 'data_fetch'
#  temporal_resolution - monthly, daily, etc.
#  time - time. YYYY-MM-DDThh:mm:ssZ format and YYYY-MM-DD format both work.
#  units - variable units. E.g. - 'mm/hr', 'mm s-2'
#  url - URL at trusted server
#  uuid - UUID
#  variable_facets - giovanni UI variable facets
#  version - <number>.<number>.<number> E.g. - '1.2.0'
#  wcs_coverage - the string 'Time-Averaged.' followed by a variable/data/aesir
#    id
#
# Note: cgi query string keys are treated as case-insensitive by Giovanni::CGI.
# In other words, if your query string has 'HEIGHT=1.0', that will be fine if
# INPUT_TYPES specifies what type 'height' is.
#
%INPUT_TYPES = (
  # Important: keys MUST be lower cases for this hash.
  # Important: please keep this in alphabetical order. Thank you.
  default => {
    # According to Ed Seiler: 
    #
    #  Apparently there is an issue with some browsers (cough IE cough) caching
    #  GET requests despite directives not to, so one solution is to make sure
    #  that every request URL is unique by adding a timestamp.
    #  
    #  jQuery does this for ajax requests by adding _={timestamp} whenever the
    #  cache setting is set to "false".
    #  
    #  In order to do this, the assumption is that the query parameter named
    #  "_" will not be confused with an actual query parameter with the same
    #  name. Having a query parameter named "_" is probably not allowed by some
    #  standard.
    '_' => 'number',
    anothervariable => 'dataKeyword',
    bands => 'number',
    bbox => 'bbox',
    bgcolor => 'hex_color',
    cancel => 'flag',
    caption => 'plot_text',
    code => 'oauth_code',
    cfg => 'g_config',
    coverage => 'wcs_coverage',
    crs => 'projection',
    data => 'url',
    datafile => 'filename',
    datakeyword => 'data_keyword',
    delete => 'flag',
    destinationunits => 'units',
    endtime => 'time',
    file => 'filename',
    filename => 'filename',
    format => 'format',
    gotoplotselection => 'data_keyword',
    goto2varplotselection => 'data_keyword',
    height => 'number',
    image => 'url',
    layer => 'data',
    layers => 'layers',
    legend => 'url',
    levels => 'number',
    mapfile => 'filename',
    months => 'months',
    options => 'json',
    overlay => 'url',
    plot => 'service',
    portal => 'portal',
    rand => 'number',
    random => 'number',
    request => 'request',
    result => 'uuid',
    resultset => 'uuid',
    resx => 'number',
    resy => 'number',
    seasons => 'seasons',
    service => 'service',
    session => 'uuid',
    shape => 'shape',
    sld => 'url',
    sourceunits => 'units',
    srs => 'projection',
    starttime => 'time',
    step => 'step',
    styles => 'styles',
    subtitle => 'plot_text',
    temporalresolution => 'temporal_resolution',
    time => 'time',
    title => 'plot_text',
    transparent => 'boolean',
    width => 'number',
    variable => 'data',
    variablefacets => 'variable_facets',
    variable1 => 'data',
    variable2 => 'data',
    version => 'version',
    vert_slice => 'number',
    x => 'data',
    xybox => 'bbox',
    y => 'data',
  },
  service_manager => {
    data => 'data',
  },
);

# List of dynamic SLD
$SLD_LIST = "/opt/giovanni4/cfg/sld_list.xml";
$DATA_CATALOG = 'https://aesir.gsfc.nasa.gov/aesir_solr/TS1';

# Missing URL file
$MISSING_URL_FILE = "/opt/giovanni4/cfg/missingUrl.txt";

$MESSAGE_SERVER="https://disc.gsfc.nasa.gov/api/alerts";

# WMS related config
%WMS=(
  map_server=>'/usr/bin/mapserv',
   # MapServer map file template
  map_xml_template => "/opt/giovanni4/cfg/wms_xml.map",
  coverage_xml_template => "/opt/giovanni4/cfg/wcs_xml.map",
  map_xml_xslt => "/opt/giovanni4/cfg/mapfile.xsl",
  background_wms => "https://disc1.gesdisc.eosdis.nasa.gov/daac-bin/wms_ogc",
  'time_out'   => 120,
  sld => {
      'correlation' => { label => 'Correlation', url => 'sld/correlation_sld.xml' },
      'n_samples' => { label => 'Count', url => 'sld/correlation_n_counts_sld.xml' },
      'time_matched_difference' => { label => 'Difference', url => 'sld/time_matched_difference_sld.xml' },
      'GSSTFM_3_SET1_INT_ST_vec' => { label => '', url=> '' },
      'NLDAS_FORA0125_H_002_ugrd10m_vgrd10m' => { label => '', url=> '' },
      'MAT1NXSLV_5_2_0_SLP' => { label => 'MERRA Data', url => 'sld/correlation_n_counts_sld.xml' },
  }
);
# List of trusted servers (used as regex)
@TRUSTED_SERVERS=('.ecs.nasa.gov', '.gesdisc.eosdis.nasa.gov', '.gsfc.nasa.gov',
                  'gibs.earthdata.nasa.gov');

$MAX_JOB_COUNT = 3;
# Feedback file
# $FEEDBACK_ARCHIVE_FILE ="/var/tmp/www/TS1/giovanni/feedbacks/feedback.archive";

%SHAPEFILES=(
  provisioned_dir => '/var/giovanni/shapefiles',
  geojson_dir     => '/var/giovanni/shapefiles/geojson',
  down_sampling => {
    'area_avg_time_series' => 4.0,
    'time_avg_map' => 1.0
  }
);

%EARTHDATA_LOGIN = (
                    # enabled = 1 to enable Earthdata login, 0 to disable
                    "enabled"        => 0,
                    # Base URL for Earthdata login
                    "baseURL"        => "https://urs.earthdata.nasa.gov",
                    # URL completion for Earthdata login authorization
                    "authorizeURL"   => "/oauth/authorize?response_type=code",
                    # URL completion for Earthdata token exchange
                    "tokenPath"      => "/oauth/token",
                    # Client ID for an Earthdata Login application
                    # UrsClientId for UrsAuthGroup
                    "clientId"       => "INSERT_UrsClientId_HERE",
                    # Redirect URI for the Earthdata Login application with the
                    # above UrsClientId. It must use the same host as Giovanni!
                    # Redirect URI for UrsAuthGroup gesdisc_test_archive on dev
                    "redirectURI"    => "INSERT_REDIRECT_URI_HERE",
                    # URL for server side script to lookup UUI groups for a given user id
                    #"rolesGetterURL" => 'INSERT_URL_FOR_LOOKING_UP_GROUPS_HERE',
                   );
%EARTHDATA_LOGIN_CONFIDENTIAL = (
                                 # Authentication header (Base64-encoded
                                 # username:pw) for Earthdata Login application
                                 # Authentication header for UrsAuthGroup gesdisc_test_archive
                                 "appAuth" => 'BASIC INSERT_BASE64_ENCODED_STRING_HERE',
                                );

# celery related config
%CELERYCONFIG=(
  # Giovanni config dir
  # This is needed because celery worker needs to know the giovanni environment,
  #   especially when celery worker is started remotely
  giovanni_config_dir => "/opt/giovanni4/cfg/"
);

# For downloads that require Earthdata Login
$LOGIN_CREDENTIALS={
  # Basic authentication credentials, grouped by location and realm
  'urs.earthdata.nasa.gov:443' => {
    "Please enter your Earthdata Login credentials. If you do not have a Earthdata Login; create one at https://urs.earthdata.nasa.gov//users/new" => {
      DOWNLOAD_USER => 'INSERT_GIOVANNI_DOWNLOAD_USER_HERE',
      DOWNLOAD_CRED => 'INSERT_GIOVANNI_DOWNLOAD_PWD_HERE',
    },
    "Please enter your Earthdata Login credentials. If you do not have a Earthdata Login, create one at https://urs.earthdata.nasa.gov//users/new" => {
      DOWNLOAD_USER => 'INSERT_GIOVANNI_DOWNLOAD_USER_HERE',
      DOWNLOAD_CRED => 'INSERT_GIOVANNI_DOWNLOAD_PWD_HERE',
    }
  }
};

# Location of plot options validation schemas
$PLOT_OPTIONS_SCHEMAS_DIR='/opt/giovanni4/cfg/json_schemas';

# A boolean flag to turn on/off result viewer access
$RESULT_VIEWER_ACCESS=0;

# Visualizer configuration
$VISUALIZER = {
  # Name of an SLD to be used when no SLD specified for a variable in AESIR
  DEFAULT_SLD => "Blue-Yellow-Red (Div), 12",
  # Items stored in history under (PLOTTYPE, KEY) tuple.
  # Default key name is used when no key is provided.
  DEFAULT_VIS_KEY => "DEFAULTVISKEY",
  # Name of the file to store visualization history into
  HISTORY_FILE_NAME => "history.json",
  # What plot type to visualize with what
  VISUALIZERS => [
  	{ PLOT_TYPES => [qw(INTERACTIVE_MAP INTERACTIVE_OVERLAY_MAP)], DRIVER => 'InteractiveMaps' },
    { PLOT_TYPES => [qw(MAP_ANIMATION)], DRIVER =>  'MapAnimation' },
    { PLOT_TYPES => [qw(INTERACTIVE_SCATTER_PLOT)], DRIVER => 'InteractiveScatterPlot' },
    { PLOT_TYPES => [qw(VERTICAL_PROFILE)], DRIVER => 'VerticalProfile' },
    { PLOT_TYPES => [qw(VERTICAL_PROFILE_GNU TIME_SERIES_GNU ZONAL_MEAN_GNU SCATTER_PLOT_GNU)], DRIVER => 'Gnuplots' },
    { PLOT_TYPES => [qw(INTERACTIVE_TIME_SERIES)], DRIVER => 'InteractiveTimeSeries' },
    { PLOT_TYPES => [qw(HOV_LAT HOV_LON)], DRIVER =>  'Hovmollers'},
    { PLOT_TYPES => [qw(HISTOGRAM)], DRIVER => 'StaticPlots'},
    { PLOT_TYPES => [qw(CURTAIN TIME_SERIES_CURTAIN)], DRIVER => 'StaticPlots'}
  ]
};

# Directory where user profile information files are stored
$USER_PROFILE_LOCATION = "$SESSION_LOCATION/user_profiles";

# String that identifies a Giovanni instance
$APPLICATION = 'GIOVANNI';

1
